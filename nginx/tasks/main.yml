---
# - name: Delete default nginx config
#   ansible.builtin.file:
#     name: /etc/nginx/sites-enabled
#     state: absent

- name: Compile nginx from source
  become: true
  block:
    - name: Install nginx dependencies
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: true
        state: present
      with_items:
        - build-essential
        - make
        - libpcre3
        - libpcre3-dev
        - libssl-dev
        - openssl
        - unzip
        - zlib1g
        - zlib1g-dev
      when: ansible_os_family == 'Debian'

    - name: Download nginx source
      ansible.builtin.get_url:
        url: "{{ nginx_tarball_url }}"
        dest: "/tmp/{{ nginx_config.nginx_version }}.tar.gz"
      register: nginx_source

    - name: Debug nginx_source
      ansible.builtin.debug:
        var: nginx_source

    - name: Unpack nginx
      ansible.builtin.unarchive:
        copy: false
        dest: "/tmp/"
        src: "{{ nginx_source.dest }}"
      when: nginx_source.changed
      register: nginx_source_unpack

    - name: Create nginx directories
      become: true
      ansible.builtin.file:
        path: /etc/nginx
        state: directory
        owner: root
        mode: "0755"

    - name: Configure nginx source with custom modules
      ansible.builtin.command: "./configure --sbin-path={{ nginx_config.nginx_sbin_path }} --conf-path={{ nginx_config.nginx_conf_path }} {{ nginx_config.nginx_custom_modules }}"
      args:
        chdir: "{{ nginx_install_dir }}"
      when: nginx_source_unpack.changed
      register: nginx_configure

    - name: Install nginx from source
      become: true
      ansible.builtin.shell: make && make install
      args:
        chdir: "{{ nginx_install_dir }}"
      when: nginx_configure.changed

    - name: Verify nginx binary location
      ansible.builtin.command: "find / -name nginx -type f"
      register: nginx_binary_location
      changed_when: false

    - name: Debug nginx binary location
      ansible.builtin.debug:
        var: nginx_binary_location.stdout_lines

    - name: Clean up temporary nginx source files
      ansible.builtin.file:
        path: " {{ nginx_install_dir }}"
        state: absent
      when: nginx_configure.changed

    - name: Create nginx systemd service file
      ansible.builtin.template:
        src: ../templates/nginx.service.j2
        dest: /etc/systemd/system/nginx.service
        owner: root
        group: root
        mode: '0644'

    - name: Ensure Logging Target directory exists
      ansible.builtin.file:
        path: /var/log/nginx
        state: directory
        owner: root
        group: letsencrypt
        mode: '0755'

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Ensure nginx is enabled and running
      ansible.builtin.service:
        name: nginx
        state: started
        enabled: true

- name: Configure letsencrypt permissions for nginx user
  become: true
  block:
    - name: Ensure letsencrypt group exists
      ansible.builtin.group:
        name: letsencrypt
        state: present

    - name: Add nginx www-data user to letsencrypt group
      ansible.builtin.user:
        name: www-data
        groups: letsencrypt
        append: true

    - name: Set permissions for letsencrypt live and archive directories
      ansible.builtin.file:
        path: /etc/letsencrypt/{{ item }}
        state: directory
        owner: root
        group: letsencrypt
        mode: "0750"
      loop:
        - live
        - archive

    - name: Set group ownership for symlinks in live directory
      ansible.builtin.file:
        path: /etc/letsencrypt/live
        state: directory
        recurse: true
        group: letsencrypt

    - name: Set group ownership for certificate files in archive directory
      ansible.builtin.file:
        path: /etc/letsencrypt/archive
        recurse: true
        group: letsencrypt

    - name: Find private keys
      become: true
      ansible.builtin.find:
        paths: /etc/letsencrypt/archive
        recurse: true
        patterns: "privkey*.pem"
      register: privkey_files

    - name: Show privkeys
      ansible.builtin.debug:
        var: privkey_files

    - name: Update permissions on private keys
      become: true
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: root
        group: letsencrypt
        mode: "0640"
      loop: "{{ privkey_files.files }}"

- name: Set global nginx config
  become: true
  block:
    - name: Add default nginx config
      ansible.builtin.copy:
        src: ../files/default.conf
        dest: /etc/nginx/default.conf

    - name: Configure global nginx config
      ansible.builtin.copy:
        src: ../files/nginx.conf
        dest: /etc/nginx/nginx.conf

- name: Configure nginx with sites-enabled
  become: true
  block:
    - name: Create sites-available directory
      ansible.builtin.file:
        dest: /etc/nginx/sites-available
        state: directory
        owner: root
        mode: '0755'

    - name: Create /etc/nginx/sites-enabled
      ansible.builtin.file:
        dest: /etc/nginx/sites-enabled
        state: directory
        owner: root
        mode: '0755'

    - name: Deploy /etc/letsencrypt/options-ssl-nginx.conf file
      ansible.builtin.copy:
        src: ../files/options-ssl-nginx.conf
        dest: /etc/letsencrypt/options-ssl-nginx.conf
        owner: root
        group: root
        mode: '0755'

    - name: Deploy nginx config file for (domain)
      ansible.builtin.template:
        src: templates/(domain).me.conf.j2
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ nginx_hosting.sites }}"
      when: item.domain == '(domain).me'

    - name: Deploy nginx config file for otherservice.(domain).me
      ansible.builtin.template:
        src: templates/otherservice.(domain).me.conf.j2
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ nginx_hosting.sites }}"
      when: item.domain == 'otherservice.(domain).me'

    - name: Deploy nginx config file for vault.(domain).me
      ansible.builtin.template:
        src: templates/vault.(domain).me.conf.j2
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ nginx_hosting.sites }}"
      when: item.domain == 'vault.(domain).me'

    - name: Set symlinks for nginx sites in sites-enabled
      ansible.builtin.file:
        src: "{{ item.dest }}"
        dest: "/etc/nginx/sites-enabled/{{ item.dest | basename }}"
        state: link
        force: true
      loop: "{{ nginx_hosting.sites }}"

    # - name: Test nginx configuration
    #   ansible.builtin.command: "/usr/sbin/nginx -t"
    #   register: nginx_test
    #   failed_when: "'successful' not in nginx_test.stdout"

    # - name: Reload nginx if configuration is valid
    #   ansible.builtin.service:
    #     name: nginx
    #     state: reloaded
    #   when: nginx_test.rc == 0


...
